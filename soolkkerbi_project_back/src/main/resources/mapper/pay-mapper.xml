<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.or.skb.pay.model.dao.PayDao">
	<select id="totalCount" resultType="int">
		select count(*) from pay where pay_status = 3
	</select>
	
	<select id="selectAllCancelPay" resultType="pay">
		select * from
		    (select rownum as rnum, p.* from
		        (select pay_no, pay_member_no, pay_product_no, member_id as pay_member_id, product_name as pay_product_name, pay_stock, product_price as pay_price, pay_date, pay_string_no, pay_status, pay_pickup 
		        from pay join member on (pay_member_no = member_no) join product on (pay_product_no = product_no) 
		        where pay_status = 3 order by pay_no) p
		    )
		where rnum between #{start} and #{end}
	</select>
	
	<update id="updatePayStatus">
		update pay set pay_status = 4 where pay_no = #{payNo}
	</update>
	
	<select id="totalCount2" resultType="int">
		select count(*) from pay where pay_status = 1
	</select>
	
	<select id="selectAllSuccessPay" resultType="pay">
		select * from
		    (select rownum as rnum, p.* from
		        (select pay_no, pay_member_no, pay_product_no, member_id as pay_member_id, product_name as pay_product_name, pay_stock, product_price as pay_price, pay_date, pay_string_no, pay_status, pay_pickup 
		        from pay join member on (pay_member_no = member_no) join product on (pay_product_no = product_no) 
		        where pay_status = 1 order by pay_no) p
		    )
		where rnum between #{start} and #{end}
	</select>
	
	<update id="confirmIncome">
		update pay set pay_status = 2 where pay_no = #{payNo}
	</update>
	
	<select id="totalCount3" resultType="int">
		select count(*) from 
		(select * from pay join member on (pay_member_no = member_no) where member_id = #{memberId})
	</select>
	
	<select id="selectMyOrderList" resultType="pay">
		select * from
		    (select rownum as rnum, o.* from(
		        (select 
		        	pay_no,
		            pay_member_no,
		            pay_product_no,
		            member_id as pay_member_id,
		            to_char(pay_date,'yyyy.mm.dd') as pay_date,
		            pay_string_no,
		            product_name as pay_product_name,
		            pay_stock,
		            product_price as pay_price,
		            pay_status,
		            product_filepath as pay_product_filepath
		        from pay
		        join product on (pay_product_no = product_no)
		        join member on (pay_member_no = member_no)
		        order by pay_date desc )o )
		        where pay_member_id=#{memberId})
		where rnum between #{start} and #{end}
	</select>
	
	<insert id="insertOnePay">
		insert into pay values(pay_seq.nextval, (select member_no from member where member_id=#{memberId}), #{cartProductNo}, to_char(sysdate,'yy/mm/dd'), #{payStringNo}, 1, #{pickupDate}, #{cartStock}, (select product_price from product where product_no=#{cartProductNo}))
	</insert>
	
	<update id="updateProductStock">
		update product set product_stock = product_stock - #{cartStock} where product_no = #{cartProductNo}
	</update>
	
	<delete id="deleteCart">
		delete from cart where cart_no=#{cartNo}
	</delete>
	
	<select id="selectAllIncome" resultType="payIncome">
		<!--
		select 
		    to_char(b.dt, 'yyyy-mm-dd') as pay_date, 
		    nvl(sum(a.takju), 0) as takju,
		    nvl(sum(a.yakju), 0) as yakju,
		    nvl(sum(a.spirit), 0) as spirit,
		    nvl(sum(a.fruit), 0) as fruit
		from (select 
		        to_char(pay_date, 'yyyy-mm-dd') as pay_date,
		        nvl(sum((select pay_stock * pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 1)), 0) as takju,
		        nvl(sum((select pay_stock * pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 2)), 0) as yakju,
		        nvl(sum((select pay_stock * pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 3)), 0) as spirit,
		        nvl(sum((select pay_stock * pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 4)), 0) as fruit
		      from pay p1
		      where pay_status = 2 and to_char(pay_date,'yyyy-mm-dd') between #{start} and #{end}
		      group by to_char(pay_date, 'yyyy-mm-dd')) a,     
		      (select to_date(#{start}) + level - 1 as dt 
		       from dual 
		       connect by level <= (to_date(#{end}) - to_date(#{start}) + 1)) b
		where b.dt = a.pay_date(+)
		group by to_char(b.dt, 'yyyy-mm-dd')
		order by 1
		-->
		
		select 
		    to_char(pay_date,'yyyy-mm-dd') as pay_date,
		    nvl(sum((select pay_stock*pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 1)),0) as takju,
		    nvl(sum((select pay_stock*pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 2)),0) as yakju,
		    nvl(sum((select pay_stock*pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 3)),0) as spirit,
		    nvl(sum((select pay_stock*pay_price 
		             from pay p2 join product pro on (pay_product_no = product_no) 
		             where p2.pay_no = p1.pay_no and pro.product_case = 4)),0) as fruit
		from pay p1 
		where pay_status = 2 and to_char(pay_date,'yyyy-mm-dd') between #{start} and #{end}
		group by to_char(pay_date,'yyyy-mm-dd') 
		order by 1
		  
	</select>

	<update id="cancelPay">
		update pay set pay_status = 3 where pay_no=#{payNo}
	</update>
</mapper>